/*
 * SPDX-FileCopyrightText: Copyright (c) 2025 Source Auditor Inc.
 * SPDX-FileType: SOURCE
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License" );
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.spdx.maven.utils;

import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Singleton class to generate IDs in a reproducible fashion.
 * <p>
 * The IDs are generated by hashing a string which should be based on a property(s) of the element for
 * which the ID is being created.  That property should be reproducible across different builds in different
 * build environments.
 * </p>
 * <p>
 * The IDs will always be unique - if two calls are made to create ID with the same string,
 * then a counter will be appended.
 * </p>
 */
public class IdGenerator {

    private static IdGenerator instance;
    private ConcurrentHashMap<String, Integer> generatedIds = new ConcurrentHashMap<>();

    private IdGenerator()
    {
        // Empty private constructor for singleton class
    }

    /**
     * Get the singleton instance
     * @return instance of IdGenerator
     */
    public static synchronized IdGenerator getIdGenerator()
    {
        if ( Objects.isNull(instance) )
        {
            instance = new IdGenerator();
        }
        return instance;
    }

    /**
     * Generate a unique ID
     * @param reproducibleString A string which should be build reproducible for the ELement this ID is being generated for
     * @return unique ID based on the reproducibleString
     */
    public String generateId( String reproducibleString )
    {
        String hashValue = Integer.toString( reproducibleString.hashCode(), 16 );
        Integer count = 0;
        while ( Objects.nonNull( generatedIds.putIfAbsent( hashValue + count, count ) ) )
        {
            count++;
        }
        return "SPDXRef-" + hashValue + count;
    }
}
